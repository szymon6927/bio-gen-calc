from app.helpers.tests_helper import find_value_by_name
from app.sequences_analysis_tools.utils.SequencesTools import SequencesTools


def test_sequences_tools_complement():
    data = dict()
    data['type'] = "complement"
    data['sequences'] = """>2765658
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGATGAGACCGTGGAATAAACGATCGAGTG
AATCCGGAGGACCGGTGTACTCAGCTCACCGGGGGCATTGCTCCCGTGGTGACCCTGATTTGTTGTTGGG
CCGCCTCGGGAGCGTCCATGGCGGGTTTGAACCTCTAGCCCGGCGCAGTTTGGGCGCCAAGCCATATGAA
AGCATCACCGGCGAATGGCATTGTCTTCCCCAAAACCCGGAGCGGCGGCGTGCTGTCGCGTGCCCAATGA


>2765657
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAACAGAATATATGATCGAGTG
AATCTGGAGGACCTGTGGTAACTCAGCTCGTCGTGGCACTGCTTTTGTCGTGACCCTGCTTTGTTGTTGG
GCCTCCTCAAGAGCTTTCATGGCAGGTTTGAACTTTAGTACGGTGCAGTTTGCGCCAAGTCATATAAAGC


>2765656
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGCAGAACATACGATCGAGTG
AATCCGGAGGACCCGTGGTTACACGGCTCACCGTGGCTTTGCTCTCGTGGTGAACCCGGTTTGCGACCGG
GCCGCCTCGGGAACTTTCATGGCGGGTTTGAACGTCTAGCGCGGCGCAGTTTGCGCCAAGTCATATGGAG"""

    seq_tools = SequencesTools(data)
    results = seq_tools.calculate()

    expected_results = [
        {'name': ">2765658",
         'value': "GCATTGTTCCAAAGGCATCCACTTGGACGCCTTCCTAGTAACTACTCTGGCACCTTATTTGCTAGCTCACTTAGGCCTCCTGGCCACATGAGTCGAGTGG"
                  "CCCCCGTAACGAGGGCACCACTGGGACTAAACAACAACCCGGCGGAGCCCTCGCAGGTACCGCCCAAACTTGGAGATCGGGCCGCGTCAAACCCGCGGTT"
                  "CGGTATACTTTCGTAGTGGCCGCTTACCGTAACAGAAGGGGTTTTGGGCCTCGCCGCCGCACGACAGCGCACGGGTTACT"},
        {'name': ">2765657",
         'value': "GCATTGTTCCAAAGGCATCCACTTGGACGCCTTCCTAGTAACAACTCTGTTGTCTTATATACTAGCTCACTTAGACCTCCTGGACACCATTGAGTCGAGC"
                  "AGCACCGTGACGAAAACAGCACTGGGACGAAACAACAACCCGGAGGAGTTCTCGAAAGTACCGTCCAAACTTGAAATCATGCCACGTCAAACGCGGTTCA"
                  "GTATATTTCG"},
        {'name': ">2765656",
         'value': "GCATTGTTCCAAAGGCATCCACTTGGACGCCTTCCTAGTAACAACTCTGTCGTCTTGTATGCTAGCTCACTTAGGCCTCCTGGGCACCAATGTGCCGAGT"
                  "GGCACCGAAACGAGAGCACCACTTGGGCCAAACGCTGGCCCGGCGGAGCCCTTGAAAGTACCGCCCAAACTTGCAGATCGCGCCGCGTCAAACGCGGTTC"
                  "AGTATACCTC"}
    ]

    for i, result in enumerate(results):
        name = result.get('name')
        value = result.get('value')

        expected_value = find_value_by_name(expected_results, name)

        assert expected_value == value


def test_sequences_tools_reverse_and_complement():
    data = dict()
    data['type'] = "reverse_and_complement"
    data['sequences'] = """>2765658
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGATGAGACCGTGGAATAAACGATCGAGTG
AATCCGGAGGACCGGTGTACTCAGCTCACCGGGGGCATTGCTCCCGTGGTGACCCTGATTTGTTGTTGGG
CCGCCTCGGGAGCGTCCATGGCGGGTTTGAACCTCTAGCCCGGCGCAGTTTGGGCGCCAAGCCATATGAA
AGCATCACCGGCGAATGGCATTGTCTTCCCCAAAACCCGGAGCGGCGGCGTGCTGTCGCGTGCCCAATGA


>2765657
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAACAGAATATATGATCGAGTG
AATCTGGAGGACCTGTGGTAACTCAGCTCGTCGTGGCACTGCTTTTGTCGTGACCCTGCTTTGTTGTTGG
GCCTCCTCAAGAGCTTTCATGGCAGGTTTGAACTTTAGTACGGTGCAGTTTGCGCCAAGTCATATAAAGC


>2765656
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGCAGAACATACGATCGAGTG
AATCCGGAGGACCCGTGGTTACACGGCTCACCGTGGCTTTGCTCTCGTGGTGAACCCGGTTTGCGACCGG
GCCGCCTCGGGAACTTTCATGGCGGGTTTGAACGTCTAGCGCGGCGCAGTTTGCGCCAAGTCATATGGAG"""

    seq_tools = SequencesTools(data)
    results = seq_tools.calculate()

    expected_results = [
        {'name': ">2765658",
         'value': "TCATTGGGCACGCGACAGCACGCCGCCGCTCCGGGTTTTGGGGAAGACAATGCCATTCGCCGGTGATGCTTTCATATGGCTTGGCGCCCAAACTGCGCCG"
                  "GGCTAGAGGTTCAAACCCGCCATGGACGCTCCCGAGGCGGCCCAACAACAAATCAGGGTCACCACGGGAGCAATGCCCCCGGTGAGCTGAGTACACCGGT"
                  "CCTCCGGATTCACTCGATCGTTTATTCCACGGTCTCATCAATGATCCTTCCGCAGGTTCACCTACGGAAACCTTGTTACG"},
        {'name': ">2765657",
         'value': "GCTTTATATGACTTGGCGCAAACTGCACCGTACTAAAGTTCAAACCTGCCATGAAAGCTCTTGAGGAGGCCCAACAACAAAGCAGGGTCACGACAAAAGC"
                  "AGTGCCACGACGAGCTGAGTTACCACAGGTCCTCCAGATTCACTCGATCATATATTCTGTTGTCTCAACAATGATCCTTCCGCAGGTTCACCTACGGAAA"
                  "CCTTGTTACG"},
        {'name': ">2765656",
         'value': "CTCCATATGACTTGGCGCAAACTGCGCCGCGCTAGACGTTCAAACCCGCCATGAAAGTTCCCGAGGCGGCCCGGTCGCAAACCGGGTTCACCACGAGAGC"
                  "AAAGCCACGGTGAGCCGTGTAACCACGGGTCCTCCGGATTCACTCGATCGTATGTTCTGCTGTCTCAACAATGATCCTTCCGCAGGTTCACCTACGGAAA"
                  "CCTTGTTACG"}
    ]

    for i, result in enumerate(results):
        name = result.get('name')
        value = result.get('value')

        expected_value = find_value_by_name(expected_results, name)

        assert expected_value == value


def test_sequences_tools_reverse():
    data = dict()
    data['type'] = "reverse"
    data['sequences'] = """>2765658
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGATGAGACCGTGGAATAAACGATCGAGTG
AATCCGGAGGACCGGTGTACTCAGCTCACCGGGGGCATTGCTCCCGTGGTGACCCTGATTTGTTGTTGGG
CCGCCTCGGGAGCGTCCATGGCGGGTTTGAACCTCTAGCCCGGCGCAGTTTGGGCGCCAAGCCATATGAA
AGCATCACCGGCGAATGGCATTGTCTTCCCCAAAACCCGGAGCGGCGGCGTGCTGTCGCGTGCCCAATGA


>2765657
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAACAGAATATATGATCGAGTG
AATCTGGAGGACCTGTGGTAACTCAGCTCGTCGTGGCACTGCTTTTGTCGTGACCCTGCTTTGTTGTTGG
GCCTCCTCAAGAGCTTTCATGGCAGGTTTGAACTTTAGTACGGTGCAGTTTGCGCCAAGTCATATAAAGC


>2765656
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGCAGAACATACGATCGAGTG
AATCCGGAGGACCCGTGGTTACACGGCTCACCGTGGCTTTGCTCTCGTGGTGAACCCGGTTTGCGACCGG
GCCGCCTCGGGAACTTTCATGGCGGGTTTGAACGTCTAGCGCGGCGCAGTTTGCGCCAAGTCATATGGAG"""

    seq_tools = SequencesTools(data)
    results = seq_tools.calculate()

    expected_results = [
        {'name': ">2765658",
         'value': "AGTAACCCGTGCGCTGTCGTGCGGCGGCGAGGCCCAAAACCCCTTCTGTTACGGTAAGCGGCCACTACGAAAGTATACCGAACCGCGGGTTTGACGCGGC"
                  "CCGATCTCCAAGTTTGGGCGGTACCTGCGAGGGCTCCGCCGGGTTGTTGTTTAGTCCCAGTGGTGCCCTCGTTACGGGGGCCACTCGACTCATGTGGCCA"
                  "GGAGGCCTAAGTGAGCTAGCAAATAAGGTGCCAGAGTAGTTACTAGGAAGGCGTCCAAGTGGATGCCTTTGGAACAATGC"},
        {'name': ">2765657",
         'value': "CGAAATATACTGAACCGCGTTTGACGTGGCATGATTTCAAGTTTGGACGGTACTTTCGAGAACTCCTCCGGGTTGTTGTTTCGTCCCAGTGCTGTTTTCG"
                  "TCACGGTGCTGCTCGACTCAATGGTGTCCAGGAGGTCTAAGTGAGCTAGTATATAAGACAACAGAGTTGTTACTAGGAAGGCGTCCAAGTGGATGCCTTT"
                  "GGAACAATGC"},
        {'name': ">2765656",
         'value': "GAGGTATACTGAACCGCGTTTGACGCGGCGCGATCTGCAAGTTTGGGCGGTACTTTCAAGGGCTCCGCCGGGCCAGCGTTTGGCCCAAGTGGTGCTCTCG"
                  "TTTCGGTGCCACTCGGCACATTGGTGCCCAGGAGGCCTAAGTGAGCTAGCATACAAGACGACAGAGTTGTTACTAGGAAGGCGTCCAAGTGGATGCCTTT"
                  "GGAACAATGC"}
    ]

    for i, result in enumerate(results):
        name = result.get('name')
        value = result.get('value')

        expected_value = find_value_by_name(expected_results, name)

        assert expected_value == value


def test_sequences_tools_transcription():
    data = dict()
    data['type'] = "transcription"
    data['sequences'] = """>2765658
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGATGAGACCGTGGAATAAACGATCGAGTG
AATCCGGAGGACCGGTGTACTCAGCTCACCGGGGGCATTGCTCCCGTGGTGACCCTGATTTGTTGTTGGG
CCGCCTCGGGAGCGTCCATGGCGGGTTTGAACCTCTAGCCCGGCGCAGTTTGGGCGCCAAGCCATATGAA
AGCATCACCGGCGAATGGCATTGTCTTCCCCAAAACCCGGAGCGGCGGCGTGCTGTCGCGTGCCCAATGA


>2765657
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAACAGAATATATGATCGAGTG
AATCTGGAGGACCTGTGGTAACTCAGCTCGTCGTGGCACTGCTTTTGTCGTGACCCTGCTTTGTTGTTGG
GCCTCCTCAAGAGCTTTCATGGCAGGTTTGAACTTTAGTACGGTGCAGTTTGCGCCAAGTCATATAAAGC


>2765656
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGCAGAACATACGATCGAGTG
AATCCGGAGGACCCGTGGTTACACGGCTCACCGTGGCTTTGCTCTCGTGGTGAACCCGGTTTGCGACCGG
GCCGCCTCGGGAACTTTCATGGCGGGTTTGAACGTCTAGCGCGGCGCAGTTTGCGCCAAGTCATATGGAG"""

    seq_tools = SequencesTools(data)
    results = seq_tools.calculate()

    expected_results = [
        {'name': ">2765658",
         'value': "CGUAACAAGGUUUCCGUAGGUGAACCUGCGGAAGGAUCAUUGAUGAGACCGUGGAAUAAACGAUCGAGUGAAUCCGGAGGACCGGUGUACUCAGCUCACC"
                  "GGGGGCAUUGCUCCCGUGGUGACCCUGAUUUGUUGUUGGGCCGCCUCGGGAGCGUCCAUGGCGGGUUUGAACCUCUAGCCCGGCGCAGUUUGGGCGCCAA"
                  "GCCAUAUGAAAGCAUCACCGGCGAAUGGCAUUGUCUUCCCCAAAACCCGGAGCGGCGGCGUGCUGUCGCGUGCCCAAUGA"},
        {'name': ">2765657",
         'value': "CGUAACAAGGUUUCCGUAGGUGAACCUGCGGAAGGAUCAUUGUUGAGACAACAGAAUAUAUGAUCGAGUGAAUCUGGAGGACCUGUGGUAACUCAGCUCG"
                  "UCGUGGCACUGCUUUUGUCGUGACCCUGCUUUGUUGUUGGGCCUCCUCAAGAGCUUUCAUGGCAGGUUUGAACUUUAGUACGGUGCAGUUUGCGCCAAGU"
                  "CAUAUAAAGC"},
        {'name': ">2765656",
         'value': "CGUAACAAGGUUUCCGUAGGUGAACCUGCGGAAGGAUCAUUGUUGAGACAGCAGAACAUACGAUCGAGUGAAUCCGGAGGACCCGUGGUUACACGGCUCA"
                  "CCGUGGCUUUGCUCUCGUGGUGAACCCGGUUUGCGACCGGGCCGCCUCGGGAACUUUCAUGGCGGGUUUGAACGUCUAGCGCGGCGCAGUUUGCGCCAAG"
                  "UCAUAUGGAG"}
    ]

    for i, result in enumerate(results):
        name = result.get('name')
        value = result.get('value')

        expected_value = find_value_by_name(expected_results, name)

        assert expected_value == value


def test_sequences_tools_translation_to_amino_acid():
    data = dict()
    data['type'] = "translation_to_amino_acid"
    data['sequences'] = """>2765658
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGATGAGACCGTGGAATAAACGATCGAGTG
AATCCGGAGGACCGGTGTACTCAGCTCACCGGGGGCATTGCTCCCGTGGTGACCCTGATTTGTTGTTGGG
CCGCCTCGGGAGCGTCCATGGCGGGTTTGAACCTCTAGCCCGGCGCAGTTTGGGCGCCAAGCCATATGAA
AGCATCACCGGCGAATGGCATTGTCTTCCCCAAAACCCGGAGCGGCGGCGTGCTGTCGCGTGCCCAATGA


>2765657
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAACAGAATATATGATCGAGTG
AATCTGGAGGACCTGTGGTAACTCAGCTCGTCGTGGCACTGCTTTTGTCGTGACCCTGCTTTGTTGTTGG
GCCTCCTCAAGAGCTTTCATGGCAGGTTTGAACTTTAGTACGGTGCAGTTTGCGCCAAGTCATATAAAGC


>2765656
CGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTGTTGAGACAGCAGAACATACGATCGAGTG
AATCCGGAGGACCCGTGGTTACACGGCTCACCGTGGCTTTGCTCTCGTGGTGAACCCGGTTTGCGACCGG
GCCGCCTCGGGAACTTTCATGGCGGGTTTGAACGTCTAGCGCGGCGCAGTTTGCGCCAAGTCATATGGAG"""

    seq_tools = SequencesTools(data)
    results = seq_tools.calculate()

    expected_results = [
        {'name': ">2765658",
         'value': "RNKVSVGEPAEGSLMRPWNKRSSESGGPVYSAHRGHCSRGDPDLLLGRLGSVHGGFEPLARRSLGAKPYESITGEWHCLPQNPERRRAVACPM"},
        {'name': ">2765657",
         'value': "RNKVSVGEPAEGSLLRQQNI*SSESGGPVVTQLVVALLLS*PCFVVGPPQELSWQV*TLVRCSLRQVI*S"},
        {'name': ">2765656",
         'value': "RNKVSVGEPAEGSLLRQQNIRSSESGGPVVTRLTVALLSW*TRFATGPPRELSWRV*TSSAAQFAPSHME"}
    ]

    for i, result in enumerate(results):
        name = result.get('name')
        value = result.get('value')

        expected_value = find_value_by_name(expected_results, name)

        assert expected_value == value
